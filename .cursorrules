# Anki复习助手项目规范

## 开发环境规范
- 使用 Node.js 版本 >= 16.0.0
- 包管理器统一使用 npm
- 编辑器推荐使用 VSCode
- 必须安装 ESLint 和 Prettier 插件

## JavaScript 编码规范
- 使用原生 JavaScript，严禁使用 TypeScript
- 使用 ES6+ 语法特性
- 优先使用 const 和 let，禁止使用 var
- 使用箭头函数表示回调
- 使用解构赋值提取对象属性
- 使用模板字符串替代字符串拼接

## Vue 开发规范
- 使用 Vue 3 组合式 API (Composition API)
- 组件名使用 PascalCase 命名
- props 必须指定类型和默认值
- 事件名使用 kebab-case 命名
- 组件目录结构遵循就近原则

## 文件命名规范
- 组件文件：PascalCase.vue（如 UserCard.vue）
- 路由页面：kebab-case.vue（如 user-profile.vue）
- 工具函数：camelCase.js（如 formatDate.js）
- 样式文件：kebab-case.scss（如 main-style.scss）

## Git 提交规范
提交信息格式：<类型>: <描述>

类型包括：
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式（不影响代码运行的变动）
- refactor: 重构（既不是新增功能，也不是修改bug的代码变动）
- test: 增加测试
- chore: 构建过程或辅助工具的变动

### 提交步骤
1. 提交前检查
   ```bash
   git status  # 检查仓库状态，确认所有需要提交的文件
   git diff    # 检查具体更改内容
   ```

2. 添加文件
   - 添加所有更改：`git add .`
   - 添加指定文件：`git add <file1> <file2>`
   - 添加指定目录：`git add <directory>`

3. 提交代码
   ```bash
   git commit -m "<类型>: <描述>"  # 使用规范的提交信息
   ```

4. 推送代码
   ```bash
   git push origin <branch-name>  # 推送到指定分支
   ```

### 最佳实践
- 每次提交前先运行 `git status` 检查状态
- 大型重构或完整功能开发使用 `git add .`
- 小型修改或部分提交使用 `git add <file>`
- 确保 .gitignore 正确配置
- 提交信息要清晰描述本次更改的内容
- 一次提交只包含一个完整的功能或修复

## 项目结构规范
```
src/
├── assets/          # 静态资源
├── components/      # 通用组件
│   ├── common/     # 基础组件
│   └── business/   # 业务组件
├── views/          # 页面组件
├── router/         # 路由配置
├── store/          # 状态管理
├── utils/          # 工具函数
├── api/            # API 接口
└── styles/         # 全局样式
```

## 样式开发规范
- 使用 SCSS 预处理器
- 遵循 BEM 命名规范
- 优先使用 Flex 布局
- 移动端适配使用 rem 单位
- SCSS 模块系统使用规范：
  - 变量文件使用下划线前缀（如 _variables.scss）
  - 严格使用 @use 语法，禁止使用 @import
  - 禁止在变量文件中使用 @forward 自引用
  - 在组件中统一使用 @use '@/styles/_variables' as * 引入变量
  - 禁止重复引入同一个变量文件
  - 全局样式文件 index.scss 中只引入一次变量文件
  - 组件样式必须添加 scoped 属性

### 变量文件规范
- 变量文件命名必须以下划线开头
- 变量文件只负责定义变量，不包含具体样式
- 可以使用 :export 导出变量给 JavaScript 使用
- 禁止在变量文件中使用 @use 或 @import
- 示例：
  ```scss
  // _variables.scss
  $primary-color: #1890ff;
  
  :export {
    primaryColor: $primary-color;
  }
  ```

### 全局样式规范
- 全局样式统一在 styles/index.scss 中管理
- index.scss 只引入一次变量文件
- 示例：
  ```scss
  // index.scss
  @use '@/styles/_variables' as *;
  
  // 全局样式定义
  ```

### 组件样式规范
- 组件样式必须使用 scoped 属性
- 统一的变量引入方式
- 示例：
  ```scss
  <style lang="scss" scoped>
  @use '@/styles/_variables' as *;
  
  .component {
    color: $primary-color;
  }
  </style>
  ```

### 设计变量规范
- 颜色变量：
  ```scss
  $primary-color: #1890ff;    // 主色
  $background-color: #f5f5f5; // 背景色
  $text-primary: #333333;     // 文字主色
  $text-secondary: #666666;   // 文字次要色
  ```

### 字体规范
- 主标题：18px
- 副标题：16px
- 正文：14px
- 辅助文字：12px

### 间距规范
- 页面边距：16px
- 大间距：24px
- 中间距：16px
- 小间距：8px

### 圆角规范
- 卡片圆角：8px
- 按钮圆角：4px

### 动效规范
- 页面切换：使用 Vue 的 transition 组件
- 弹窗：使用 scale 和 opacity 过渡
- 列表项：使用 fade 效果
- 按钮：使用 transform scale 效果
- Loading：使用 Vant 内置的 loading 组件

### 响应式设计
- 使用 rem 作为主要单位
- 基准字号：37.5px（适配 375px 设计稿）
- 使用 vw/vh 作为辅助单位
- 图片使用 responsive 属性

### 组件样式规范
- 使用 scoped 属性隔离样式
- 全局样式放在 styles 目录
- 使用 CSS 变量实现主题定制
- 避免使用 !important

## 性能优化规范
- 组件懒加载
- 图片资源压缩
- 合理使用缓存
- 避免重复请求
- 代码分割

## 安全规范
- 所有用户输入必须验证
- API 请求必须处理错误情况
- 敏感信息不允许硬编码
- 使用 HTTPS 协议
- 实现 XSS 防护

## 测试规范
- 编写单元测试
- 组件需要测试 props 和事件
- 工具函数需要测试边界情况
- 保持测试覆盖率 > 80%

## 文档规范
- 组件必须包含使用说明
- API 接口必须有文档
- 复杂逻辑需要添加注释
- 及时更新文档

## 发布规范
- 遵循语义化版本
- 每次发布都要有更新日志
- 发布前必须通过所有测试
- 打包后进行手动测试验证 