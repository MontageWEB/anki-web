# Anki复习助手项目规范

## 开发环境规范

### 基本要求
- 使用 Node.js 版本 >= 16.0.0
- 包管理器统一使用 npm
- 编辑器推荐使用 VSCode
- 必须安装 ESLint 和 Prettier 插件

### 依赖管理
✅ 推荐做法：
- 所有依赖版本必须固定，禁止使用 ^ 或 ~
- 定期更新依赖版本，但要经过完整测试
- 使用 `npm audit` 检查依赖安全性

❌ 避免做法：
- 使用 latest 标签
- 随意升级依赖版本
- 使用未经验证的第三方包

## JavaScript 编码规范
- 使用原生 JavaScript，严禁使用 TypeScript
- 使用 ES6+ 语法特性
- 优先使用 const 和 let，禁止使用 var
- 使用箭头函数表示回调
- 使用解构赋值提取对象属性
- 使用模板字符串替代字符串拼接

## Vue 开发规范

### 组件开发
✅ 推荐做法：
- 使用 Vue 3 组合式 API (Composition API)
- 组件名使用 PascalCase 命名
- props 必须指定类型和默认值
- 事件名使用 kebab-case 命名

❌ 避免做法：
- 混用选项式 API 和组合式 API
- 在 setup 中使用 this
- props 类型不明确
- 组件过于复杂（建议拆分）

### Vant 组件使用规范
✅ 必须遵循：
1. 组件注册：
   ```javascript
   // main.js
   import { 
     Button,
     Calendar,  // 在这里导入需要使用的组件
   } from 'vant'
   
   // 必须注册后才能使用
   app.use(Button)
   app.use(Calendar)
   ```

2. 组件使用检查清单：
   - [ ] 确认组件已在 main.js 中导入
   - [ ] 确认组件已在 main.js 中注册（app.use）
   - [ ] 确认组件名称拼写正确（例如：van-calendar）
   - [ ] 确认属性和事件名称的正确性

3. 常见问题处理：
   - 组件未定义错误：检查 main.js 中的导入和注册
   - 属性无效：查阅 Vant 文档确认属性名称
   - 事件未触发：确认事件名称是否正确（例如：@click、@confirm）

4. 组件添加流程：
   - 在使用新组件前，必须先检查规范要求
   - 立即在 main.js 中完成组件的导入和注册
   - 按字母顺序维护组件列表
   - 完成注册后再开始使用组件

❌ 避免做法：
- 在单个组件中直接导入 Vant 组件
- 使用未经注册的组件
- 使用已废弃的属性或事件名称
- 延迟组件注册或忘记注册

### 组件目录结构遵循就近原则

## 文件命名规范
- 组件文件：PascalCase.vue（如 UserCard.vue）
- 路由页面：kebab-case.vue（如 user-profile.vue）
- 工具函数：camelCase.js（如 formatDate.js）
- 样式文件：kebab-case.scss（如 main-style.scss）

## Git 提交规范
提交信息格式：<类型>: <描述>

类型包括：
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式（不影响代码运行的变动）
- refactor: 重构（既不是新增功能，也不是修改bug的代码变动）
- test: 增加测试
- chore: 构建过程或辅助工具的变动

### 提交步骤
1. 提交前检查
   ```bash
   git status  # 检查仓库状态，确认所有需要提交的文件
   git diff    # 检查具体更改内容
   ```

2. 添加文件
   - 添加所有更改：`git add .`
   - 添加指定文件：`git add <file1> <file2>`
   - 添加指定目录：`git add <directory>`

3. 提交代码
   ```bash
   git commit -m "<类型>: <描述>"  # 使用规范的提交信息
   ```

4. 推送代码
   ```bash
   git push origin <branch-name>  # 推送到指定分支
   ```

### 最佳实践
- 每次提交前先运行 `git status` 检查状态
- 大型重构或完整功能开发使用 `git add .`
- 小型修改或部分提交使用 `git add <file>`
- 确保 .gitignore 正确配置
- 提交信息要清晰描述本次更改的内容
- 一次提交只包含一个完整的功能或修复

## 项目结构规范
```
src/
├── assets/          # 静态资源
├── components/      # 通用组件
│   ├── common/     # 基础组件
│   └── business/   # 业务组件
├── views/          # 页面组件
├── router/         # 路由配置
├── store/          # 状态管理
├── utils/          # 工具函数
├── api/            # API 接口
└── styles/         # 全局样式
```

## 样式开发规范

### SCSS 模块系统使用规范
✅ 必须遵循：
1. 使用新的 SCSS 模块系统：
   ```scss
   // ✅ 正确示例
   @use '@/styles/_variables' as *;
   
   // ❌ 禁止使用
   @import '@/styles/_variables';
   ```

2. 变量文件命名和组织：
   - 使用下划线前缀（如 `_variables.scss`）
   - 禁止在变量文件中使用 @forward 自引用
   - 所有全局变量必须在 _variables.scss 中定义

3. 组件中的样式：
   ```vue
   <style lang="scss" scoped>
   // ✅ 正确示例
   @use '@/styles/_variables' as *;
   
   .component {
     color: $color-text-primary;
     padding: $spacing-medium;
   }
   </style>
   ```

### 基本规范
- 使用 SCSS 预处理器（Dart Sass 1.69.7）
- 遵循 BEM 命名规范
- 优先使用 Flex 布局
- 移动端适配使用 rem 单位

### 设计变量规范
- 颜色变量：
  ```scss
  $primary-color: #1890ff;    // 主色
  $background-color: #f5f5f5; // 背景色
  $text-primary: #333333;     // 文字主色
  $text-secondary: #666666;   // 文字次要色
  ```

### 字体规范
- 主标题：18px
- 副标题：16px
- 正文：14px
- 辅助文字：12px

### 间距规范
- 页面边距：16px
- 大间距：24px
- 中间距：16px
- 小间距：8px

### 圆角规范
- 卡片圆角：8px
- 按钮圆角：4px

### 动效规范
- 页面切换：使用 Vue 的 transition 组件
- 弹窗：使用 scale 和 opacity 过渡
- 列表项：使用 fade 效果
- 按钮：使用 transform scale 效果
- Loading：使用 Vant 内置的 loading 组件

### Sass 版本和配置规范
- 使用固定版本的 sass（推荐 1.69.7），避免使用 ^ 版本号
- 禁止使用 node-sass，统一使用 dart-sass
- vite.config.js 中的 Sass 配置应保持简单：
  ```javascript
  css: {
    preprocessorOptions: {
      scss: {
        includePaths: [path.resolve(__dirname, 'src/styles')],
        quietDeps: true
      }
    }
  }
  ```

### SCSS 文件组织规范
- 变量文件使用下划线前缀（如 _variables.scss）
- 使用简单的 @import 语法，避免复杂的 @use/@forward
- 全局样式统一在 styles/index.scss 中管理
- 组件样式必须添加 scoped 属性
- 变量文件结构示例：
  ```scss
  // _variables.scss
  // 变量定义
  $primary-color: #1890ff;
  
  // JS 导出（可选）
  :export {
    primaryColor: $primary-color;
  }
  ```

### 全局样式引入规范
- 在 index.scss 中引入变量：
  ```scss
  @import './_variables.scss';
  
  // 全局样式定义
  ```

### 组件样式规范
- 组件中引入变量：
  ```scss
  <style lang="scss" scoped>
  @import '@/styles/_variables.scss';
  
  .component {
    color: $primary-color;
  }
  </style>
  ```

### Sass 使用注意事项
1. 依赖管理：
   - package.json 中明确指定 sass 版本
   - 定期更新但要注意版本稳定性
   - 避免使用 latest 标签

2. 性能优化：
   - 避免过深的选择器嵌套（不超过3层）
   - 合理使用 mixins 和 functions
   - 避免过度使用 @extend

3. 调试技巧：
   - 使用 quietDeps 选项抑制依赖警告
   - 出现编译问题时，先检查 vite.config.js 配置
   - 保持简单的文件引入方式

4. 常见问题解决：
   - 如遇到 legacy-js-api 警告，检查 sass 版本
   - 路径引入问题，使用 includePaths 配置
   - 编译慢，考虑减少 @import 的使用

5. 代码审查要点：
   - 检查变量命名规范
   - 确认样式隔离（scoped）
   - 验证响应式设计
   - 检查浏览器兼容性

### 文件命名规范
- 全局变量：_variables.scss
- 全局样式：index.scss
- 组件样式：与组件同名，使用 .vue 文件的 <style> 标签
- 工具函数：_mixins.scss, _functions.scss

### 变量命名规范
✅ 正确示例：
```scss
$color-primary: #1890ff;
$color-text-primary: #333333;
$font-size-large: 18px;
$spacing-medium: 16px;
```

❌ 错误示例：
```scss
$primary: #1890ff;      // 缺少类型前缀
$text: #333333;         // 命名不明确
$large: 18px;           // 含义不清晰
$space: 16px;           // 过于简单
```

### 变量使用最佳实践
1. 文件组织
   ✅ 推荐做法：
   ```scss
   // _variables.scss
   $color-primary: #1890ff;
   
   // 组件中
   @import '@/styles/_variables.scss';
   ```
   
   ❌ 避免做法：
   ```scss
   // 组件中直接定义变量
   $color-primary: #1890ff;
   ```

2. 变量引用
   ✅ 推荐做法：
   ```scss
   .button {
     color: $color-text-primary;
     font-size: $font-size-normal;
   }
   ```
   
   ❌ 避免做法：
   ```scss
   .button {
     color: #333333;  // 硬编码颜色值
     font-size: 14px; // 硬编码尺寸
   }
   ```

### 响应式设计规范
- 使用 rem 作为主要单位
- 基准字号：37.5px（适配 375px 设计稿）
- 使用 vw/vh 作为辅助单位
- 图片使用 responsive 属性
- 媒体查询断点统一管理
- 避免使用固定宽度

## 性能优化规范
- 组件懒加载
- 图片资源压缩
- 合理使用缓存
- 避免重复请求
- 代码分割

## 安全规范
- 所有用户输入必须验证
- API 请求必须处理错误情况
- 敏感信息不允许硬编码
- 使用 HTTPS 协议
- 实现 XSS 防护

## 测试规范
- 编写单元测试
- 组件需要测试 props 和事件
- 工具函数需要测试边界情况
- 保持测试覆盖率 > 80%

## 文档规范
- 组件必须包含使用说明
- API 接口必须有文档
- 复杂逻辑需要添加注释
- 及时更新文档

## 发布规范
- 遵循语义化版本
- 每次发布都要有更新日志
- 发布前必须通过所有测试
- 打包后进行手动测试验证

## 工具函数开发规范
- 工具函数必须放在 utils 目录下
- 按功能模块拆分文件，如 date.js、storage.js、validate.js 等
- 使用 ES6 模块语法导出函数
- 每个函数都要有 JSDoc 注释说明功能、参数和返回值
- 在使用工具函数前，确保相关文件已创建

### 工具函数文件结构
```javascript
/**
 * 函数说明
 * @param {参数类型} 参数名 参数说明
 * @returns {返回值类型} 返回值说明
 */
export function functionName(params) {
  // 函数实现
}
```

### 工具函数开发流程
1. 创建文件
   - 在 utils 目录下创建对应功能的文件
   - 文件名使用 camelCase 命名法
   - 相关功能放在同一文件中

2. 编写函数
   - 添加完整的 JSDoc 注释
   - 实现函数功能
   - 处理异常情况
   - 添加必要的参数验证

3. 导出函数
   - 使用具名导出（named export）
   - 避免使用默认导出（default export）
   - 相关函数放在一起导出

4. 使用函数
   - 在组件中导入时使用解构赋值
   - 导入路径使用 @/utils 别名
   - 确保工具函数文件存在

### 常用工具函数目录
```
utils/
├── date.js         # 日期处理
├── storage.js      # 本地存储
├── validate.js     # 数据验证
├── format.js       # 数据格式化
└── request.js      # 请求封装
```

## 状态管理规范
- 使用 Pinia 进行状态管理
- 按功能模块拆分 store
- store 文件命名使用 camelCase
- 必须处理 loading 和错误状态
- 统一使用 Toast 提示用户操作结果

### Store 文件结构
```javascript
import { defineStore } from 'pinia'

export const useExampleStore = defineStore('example', {
  // 状态定义
  state: () => ({
    data: [],
    loading: false,
    initialized: false
  }),

  // 计算属性
  getters: {
    computedData: (state) => state.data
  },

  // 异步操作和状态修改
  actions: {
    // 初始化数据
    async initializeData() {
      if (this.initialized) return
      
      this.loading = true
      try {
        // 异步操作
        this.initialized = true
      } catch (error) {
        Toast.fail('操作失败')
      } finally {
        this.loading = false
      }
    }
  }
})
```

### Store 使用规范
- 在组件中使用 `setup()` 时导入 store
- 使用 `computed` 处理响应式数据
- 在 `onMounted` 中初始化数据
- 处理异步操作的 loading 状态
- 使用 try-catch 处理错误情况

## 本地存储规范
- 使用 localforage 进行本地存储
- 统一在 utils/storage.js 中封装存储操作
- 所有存储操作必须处理异常情况
- 使用 Promise 封装异步操作
- 遵循数据库 CRUD 操作规范

### 存储服务示例
```javascript
import localforage from 'localforage'

class StorageService {
  constructor(storeName) {
    localforage.config({
      name: 'anki-web',
      storeName
    })
  }

  async getItem(key) {
    try {
      return await localforage.getItem(key)
    } catch (error) {
      console.error(`获取数据失败: ${key}`, error)
      throw error
    }
  }

  async setItem(key, value) {
    try {
      await localforage.setItem(key, value)
    } catch (error) {
      console.error(`保存数据失败: ${key}`, error)
      throw error
    }
  }
}
```

### 数据持久化规范
- 重要数据必须及时持久化
- 大量数据使用批量操作
- 定期清理过期数据
- 处理存储空间不足的情况
- 提供数据导入导出功能 

#### 常见问题及解决方案

1. 变量未定义错误
   ```
   Undefined variable: "$text-primary"
   ```
   解决步骤：
   1. 检查变量名是否符合规范（是否缺少前缀）
   2. 确认是否已导入变量文件
   3. 使用 grep 搜索确保变量名全局统一
   4. 检查 _variables.scss 文件中是否定义了该变量

2. 样式不生效
   问题表现：
   - 样式写了但不生效
   - 样式优先级不符合预期
   
   解决步骤：
   1. 检查是否添加了 scoped 属性
   2. 检查选择器优先级
   3. 使用 Vue DevTools 查看元素样式
   4. 考虑使用 :deep() 选择器

3. 样式污染
   问题表现：
   - 组件样式影响到其他组件
   
   解决步骤：
   1. 添加 scoped 属性
   2. 使用 BEM 命名规范
   3. 避免使用全局选择器 

## 卡片接口规范

### API 路径规范
- 卡片相关接口统一使用 `/api/v1/cards` 作为基础路径
- 遵循 RESTful API 设计规范
- 使用复数形式命名资源（如 cards 而不是 card）

### 字段映射规范
✅ 前后端字段映射规则：
```javascript
// 前端字段 -> 后端字段
{
  title: 'question',      // 问题/标题
  answer: 'answer',       // 答案
  createdAt: 'created_at' // 创建时间
}
```

### 错误处理规范
- 422 状态码（Unprocessable Entity）处理：
  - 检查请求数据结构是否符合后端要求
  - 确保所有必填字段都已提供
  - 验证字段命名是否与后端一致

### 组件命名规范
✅ 推荐做法：
- 新增卡片组件统一使用 `create.vue`
- 编辑卡片组件统一使用 `edit.vue`
- 卡片详情组件统一使用 `detail.vue`

❌ 避免做法：
- 使用 `add.vue` 作为新增组件名
- 组件命名不一致（如混用 add/create）
- 未遵循 kebab-case 命名约定

### 数据转换规范
- 前端展示数据和后端数据结构需要进行统一转换
- 在 API 层处理数据转换，而不是在组件中
- 使用专门的转换函数处理字段映射
- 保持转换函数的单一职责

### 表单处理规范
- 统一使用 Vant 的 Form 组件
- 必须进行表单验证
- 提交前清空不必要的字段
- 处理所有可能的错误情况

### 路由处理规范
- 二级及以下层级页面要保持其一级导航栏的高亮状态
- 路由配置示例：
  ```javascript
  {
    path: '/card/create',
    name: 'card-create',
    component: () => import('@/views/card/create.vue'),
    meta: {
      title: '新增卡片',
      parent: '/card/list'  // 标记父级路由，保持卡片库导航项高亮
    }
  }
  ```
- TabBar 组件中的高亮判断：
  ```javascript
  const isActive = (path) => {
    return route.path === path || route.meta.parent === path
  }
  ```

- 保存成功后的跳转逻辑：
  - 从今日复习进入：返回复习页面
  - 从卡片库进入：返回卡片库
  - 从底部导航进入：返回首页

### 状态管理规范
- 使用 Pinia 管理卡片相关状态
- 统一在 store/card.js 中处理卡片数据
- 处理 loading 和错误状态
- 提供清晰的 action 命名 